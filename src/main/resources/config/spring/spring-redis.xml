<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
	<!-- Activates annotation-based bean configuration -->
	
	<context:annotation-config />

	<context:property-placeholder location="classpath:config/properties/*.properties" />

	<!-- jedis 配置-->
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig" >
		<!--最大空闲数-->
		<property name="maxIdle" value="${redis.maxIdle}" />
		<!--最大建立连接等待时间-->
		<property name="maxWaitMillis" value="${redis.maxWait}" />
		<!--是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个-->
		<property name="testOnBorrow" value="${redis.testOnBorrow}" />
		<property name="maxTotal" value="${redis.maxTotal}" />
		<property name="minIdle" value="${redis.minIdle}" />
	</bean >

	<!--配置文件加载-->
	<bean id="resourcePropertySource" class="org.springframework.core.io.support.ResourcePropertySource">
		<constructor-arg name="name" value="redis.properties"/>
		<constructor-arg name="resource" value="classpath:config/properties/redis.properties"/>
	</bean>
	<!--redisCluster配置-->
	<bean id="redisClusterConfiguration" class="org.springframework.data.redis.connection.RedisClusterConfiguration">
		<constructor-arg name="propertySource" ref="resourcePropertySource"/>
	</bean>
	<!-- redis服务器中心 -->
	<bean id="connectionFactory"  class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" >
		<constructor-arg name="clusterConfig" ref="redisClusterConfiguration"/>
		<constructor-arg name="poolConfig" ref="poolConfig"/>
		<property name="password" value="${redis.password}" />
		<property name="timeout" value="${redis.timeout}"  />
	</bean >
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate" >
		<property name="connectionFactory" ref="connectionFactory" />
		<!--如果不配置Serializer，那么存储的时候缺省使用String，如果用User类型存储，那么会提示错误User can't cast to String！！  -->
		<property name="keySerializer" >
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="valueSerializer" >
			<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property>
		<property name="hashKeySerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
		</property>
		<property name="hashValueSerializer">
			<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
		</property>
	</bean >
</beans>